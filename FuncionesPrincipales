#include <math.h>
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_HMC5883_U.h>

Adafruit_HMC5883_Unified mag = Adafruit_HMC5883_Unified(12345); 

byte Aa = 4; //motor adelante derecha
byte Ab = 5; //motor adelante derecha
byte Ba = 2; //motor atras derecha
byte Bb = 3; //motor atras derecha
byte Ca = 6; //motor adelante izq
byte Cb = 7; //motor adelante izq 
byte Da = 8; //motor atras izq
byte Db = 9; //motor atras izq  
const int s0 = 51;  
const int s1 = 49;  
const int s2 = 50;  
const int s3 = 48;  
const int out = 52;  
byte SenIzqTrig = 43; //sensor ultrasonico izquierdo trigger
byte SenIzqEch = 42; //sensor ultrasonico izquierdo echo
byte SenDerTrig = 45;  //sensor ultrasonico derecha trigger
byte SenDerEch = 44;//sensor ultrasonico derecha echo
byte SenEnfEch = 46; //sensor ultrasonico frontal echo
byte SenEnfTrig = 47; //sensor ultrasonico frontal trigger



int Avel = 255; // Adelante, derrecha.
int Bvel = 255; // Atras, derecha.
int Cvel = 238; // Adelante, izquerda.   (Siempre hay que disminuir en 17 los motores izquierdos.)
int Dvel = 238; // Atras, izquierda.
int red = 0;  
int green = 0;  
int blue = 0;  
String colon = "";
long tiempo; // Variable para los ultrasonicos
long DistanciaSenEnfrente, DistanciaSenDerecha, DistanciaSenIzquierdo;//Variable para la distancia

void setup() {
  Serial.begin (9600);
  pinMode (Aa, OUTPUT);
  pinMode (Ab, OUTPUT);
  pinMode (Ba, OUTPUT);
  pinMode (Bb, OUTPUT);
  pinMode (Ca, OUTPUT);
  pinMode (Cb, OUTPUT);
  pinMode (Da, OUTPUT);
  pinMode (Db, OUTPUT); 
  pinMode(s0, OUTPUT);  
  pinMode(s1, OUTPUT);  
  pinMode(s2, OUTPUT);  
  pinMode(s3, OUTPUT);  
  pinMode(out, INPUT);  
  pinMode(SenIzqEch, INPUT);
  pinMode(SenDerEch, INPUT);
  pinMode(SenEnfEch, INPUT);
  pinMode(SenIzqTrig, OUTPUT);
  pinMode(SenDerTrig, OUTPUT);
  pinMode(SenEnfTrig, OUTPUT);
  digitalWrite(s0, HIGH);  
  digitalWrite(s1, HIGH);

 // Tampoco lo entendemos
   if(!mag.begin())
  {
    Serial.println("Ooops, no HMC5883 detected ... Check your wiring!");
    while(1);
  } 

 //Pero funciona
} 

//Magnetometro, (no lo entendemos pero funciona) 
//Magnetometro, (no lo entendemos pero funciona) 
//Magnetometro, (no lo entendemos pero funciona) 
//Magnetometro, (no lo entendemos pero funciona) 

int heading() 
{
  sensors_event_t event; 
  mag.getEvent(&event);
  float heading = atan2(event.magnetic.y, event.magnetic.x);
  float declinationAngle = 0.087;
  heading += declinationAngle;
  if(heading < 0)
    heading += 2*PI;
  if(heading > 2*PI)
    heading -= 2*PI;
  int headingDegrees = heading * 180/M_PI; 
  if (headingDegrees<=86)
  {
    headingDegrees=map(headingDegrees,0,86,0,90); 
  }
    if (headingDegrees<=200 && headingDegrees>86)
  {
    headingDegrees=map(headingDegrees,87,200,91,180); 
  }
     if (headingDegrees<=289 && headingDegrees>200)
  {
    headingDegrees=map(headingDegrees,201,289,181,270); 
  }
       if (headingDegrees<=359 && headingDegrees>289)
  {
    headingDegrees=map(headingDegrees,290,359,271,359); 
  }
  delay(5);
  return headingDegrees;
} 

// (Despues de esta parte si entendemos) 
// (Despues de esta parte si entendemos) 
// (Despues de esta parte si entendemos) 
// (Despues de esta parte si entendemos)

// Motores avnazan 

void avanzar(){ 
  
  analogWrite (Aa, Avel);
  analogWrite (Ab, LOW);
  
  analogWrite (Ba, Bvel);
  analogWrite (Bb, LOW);
  
  analogWrite (Ca, Cvel);
  analogWrite (Cb, LOW); 
  
  analogWrite (Da, Dvel);
  analogWrite (Db, LOW);
}

// Motores de detienen 

void detenerse(){ 
  
  analogWrite (Aa, LOW);
  analogWrite (Ab, Avel);
  
  analogWrite (Ba, LOW);
  analogWrite (Bb, Bvel);
  
  analogWrite (Ca, LOW);
  analogWrite (Cb, Cvel); 
  
  analogWrite (Da, LOW);
  analogWrite (Db, Dvel);  

  delay(100); // ABS

  analogWrite (Aa, LOW);
  analogWrite (Ab, LOW);
  
  analogWrite (Ba, LOW);
  analogWrite (Bb, LOW);
  
  analogWrite (Ca, LOW);
  analogWrite (Cb, LOW); 
  
  analogWrite (Da, LOW);
  analogWrite (Db, LOW);
} 

//Motores a la izquierda

void vueltaIzquierda() 
{ 
  analogWrite (Aa, 190); //HIGH
  analogWrite (Ab, LOW);  //LOW
  analogWrite (Ba, 155); //HIGH
  analogWrite (Bb, LOW);  //LOW
  
  analogWrite (Ca, LOW);  //LOW
  analogWrite (Cb, 155); //HIGH 
  analogWrite (Da, LOW);  //LOW
  analogWrite (Db, 110); //HIGH
} 

//Motores a la derecha

void vueltaDerecha()
{ 
  analogWrite (Aa, LOW);  //LOW
  analogWrite (Ab, Avel/2); //HIGH
  analogWrite (Ba, LOW);  //LOW
  analogWrite (Bb, Bvel/2); //HIGH
  analogWrite (Ca, Cvel/2); //HIGH
  analogWrite (Cb, LOW);  //LOW
  analogWrite (Da, Dvel/2); //HIGH
  analogWrite (Db, LOW);  //LOW
}

void derecha90()
{
  int g1 = heading();
  int g2 = g1 + 90;
  if(g2 > 360)
  {
    g2 -= 360;
  }
  bool cont = false;
  while (cont == false)
  {
    if(g1 <= g2)
    {
      vueltaDerecha();
      g1 = heading();
      if(g1 >= g2)
      {
        cont = true;
      }
    }
    else if(g1 > g2)
    {
      vueltaDerecha();
      g1=heading();
    }
  }
  detenerse();
}

 
void derecha270()
{
  int g1 = heading();
  int g2 = g1 - 90;
  if(g2 < 0)
  {
    g2 += 360;
  }
  bool cont = false;
  while(cont == false)
  {
    if(g1 <= g2)
    {
      if(g1 >= g2)
      {
        cont = true;
      }
      vueltaDerecha();
      g1 = heading();
    }
    else if(g1 > g2)
    {
      vueltaDerecha();
      g1 = heading();
    }
  }
  detenerse();
}

void izquierda90()
{
  int g1=heading();
  int g2=g1 - 90;
  if(g2 < 0)
  {
    g2 += 360;
  }
  bool cont = false;

  while(cont == false)
  {
    if (g1 >= g2)
    {
      if(g1 <= g2)
      {
        cont = true;
      }
      vueltaIzquierda();
      g1 = heading();
      
    }
    else if(g1 < g2)
    {
      vueltaIzquierda();
      g1=heading();
    }
  }
  detenerse();
}

void izquierda270()
{
  int g1 = heading();
  int g2 = g1 + 90;
  if (g2 > 360)
  {
    g2 -= 360;
  }
  bool cont = false;
  while(cont == false)
  {
    if( g1 >= g2)
    {
      if(g1 <= g2)
      {
        cont = true;
      }
      vueltaIzquierda();
      g1 = heading();
    }
    else if(g1 < g2)
    {
      vueltaIzquierda();
      g1 = heading();
    }
  }
  detenerse();
}

String color()  
{    
  digitalWrite(s2, LOW);  
  digitalWrite(s3, LOW);  
  //count OUT, pRed, RED  
  red = pulseIn(out, digitalRead(out) == HIGH ? LOW : HIGH);  
  digitalWrite(s3, HIGH);  
  //count OUT, pBLUE, BLUE  
  blue = pulseIn(out, digitalRead(out) == HIGH ? LOW : HIGH);  
  digitalWrite(s2, HIGH);  
  //count OUT, pGreen, GREEN  
  green = pulseIn(out, digitalRead(out) == HIGH ? LOW : HIGH); 

   if ((green >= 3 && green <= 15) && (blue >= 3 && blue <= 15) && (red >= 3 &&  red <= 15))
  {
    colon = "white";
  }
  else if ((green > 25 && green < 32) && (blue > 25 && blue < 32) && (red > 45 &&  red < 62))
  {
    colon = "green";
  }
  else if ((green > 55 && green < 72) && (blue > 40 && blue < 52) && (red > 70 &&  red < 85))
  {
    colon = "black";
  }
  else if ((green > 25 && green < 36) && (blue > 18 && blue < 27) && (red > 8 &&  red < 15))
  {
    colon = "red";
  }
  return colon;
}

int SensorDerecha () //funcion para sensor ultrasonico derecha
{
  long SumaDistancias = 0;
 long Distancia1 = 0;
 long  Distancia2 = 0;
 long Distancia3 = 0;
 int iI;
 
  for (iI=1; iI<=3; iI++)
  {
    digitalWrite(45, LOW);
    delayMicroseconds(5);
    digitalWrite(45, HIGH);  
    delayMicroseconds(10);
    tiempo=pulseIn(44, HIGH);
    delayMicroseconds(50);
    if ( iI==1 )
    {
      Distancia1 = int(0.017*tiempo);
    }
    else if ( iI== 2 )
    {
      Distancia2 = int(0.017*tiempo);
    }
    else if ( iI==3 )
    {
      Distancia3 = int(0.017*tiempo);
    }
   }

  if (Distancia1 > Distancia2 && Distancia1 > Distancia3)
  {
    if (Distancia2 > Distancia3)
    {
      DistanciaSenDerecha = Distancia2;
    }
    else
    {
      DistanciaSenDerecha = Distancia3;
    }
  }
  if (Distancia2 > Distancia1 && Distancia2 > Distancia3)
  {
    if (Distancia1 > Distancia3)
    {
      DistanciaSenDerecha = Distancia1;
    }
    else
    {
      DistanciaSenDerecha = Distancia3;
    }
  }
  if (Distancia3 > Distancia1 && Distancia3 > Distancia2)
  {
    if (Distancia2 > Distancia1)
    {
      DistanciaSenDerecha = Distancia2;
    }  
    else 
    {
      DistanciaSenDerecha = Distancia1;
    }
  }
  if (Distancia1 == Distancia2)
  {
   DistanciaSenDerecha=Distancia1;
  }
  if (Distancia1 == Distancia3)
  {
   DistanciaSenDerecha=Distancia1;
  }
  if (Distancia2 == Distancia3)
  {
   DistanciaSenDerecha=Distancia2;
  }
    if (Distancia2 == Distancia1)
  {
   DistanciaSenDerecha=Distancia2;
  }

  return DistanciaSenDerecha;
}

int SensorFrontal() //funcion para sensor ultrasonico frontal
{
 long SumaDistancias = 0;
 long Distancia1 = 0;
 long  Distancia2 = 0;
 long Distancia3 = 0;
 int iI;
 
  for (iI=1; iI<=3; iI++)
  {
    digitalWrite(47, LOW);
    delayMicroseconds(5);
    digitalWrite(47, HIGH);  
    delayMicroseconds(10);
    tiempo=pulseIn(46, HIGH);
    delayMicroseconds(50);
    if ( iI==1 )
    {
      Distancia1 = int(0.017*tiempo);
    }
    else if ( iI== 2 )
    {
      Distancia2 = int(0.017*tiempo);
    }
    else if ( iI==3 )
    {
      Distancia3 = int(0.017*tiempo);
    }
   }

  if (Distancia1 > Distancia2 && Distancia1 > Distancia3)
  {
    if (Distancia2 > Distancia3)
    {
      DistanciaSenEnfrente = Distancia2;
    }
    else
    {
      DistanciaSenEnfrente = Distancia3;
    }
  }
  if (Distancia2 > Distancia1 && Distancia2 > Distancia3)
  {
    if (Distancia1 > Distancia3)
    {
      DistanciaSenEnfrente = Distancia1;
    }
    else
    {
      DistanciaSenEnfrente = Distancia3;
    }
  }
  if (Distancia3 > Distancia1 && Distancia3 > Distancia2)
  {
    if (Distancia2 > Distancia1)
    {
      DistanciaSenEnfrente = Distancia2;
    }
    else 
    {
      DistanciaSenEnfrente = Distancia1;
    }
  }
  if (Distancia1 == Distancia2)
  {
   DistanciaSenEnfrente=Distancia1;
  }
  if (Distancia1 == Distancia3)
  {
   DistanciaSenEnfrente=Distancia1;
  }
  if (Distancia2 == Distancia3)
  {
   DistanciaSenEnfrente=Distancia2;
  }
    if (Distancia2 == Distancia1)
  {
   DistanciaSenEnfrente=Distancia2;
  }
 return DistanciaSenEnfrente;
}

int SensorIzquierdo () //funcion para sensor izquierdo
{
 long SumaDistancias = 0;
 long Distancia1 = 0;
 long  Distancia2 = 0;
 long Distancia3 = 0;
 long DistanciaSenIzquierdo = 0;
 int iI;
 
  for (iI=1; iI<=3; iI++)
  {
    digitalWrite(43, LOW);
    delayMicroseconds(5);
    digitalWrite(43, HIGH);  
    delayMicroseconds(10);
    tiempo=pulseIn(42, HIGH);
    delayMicroseconds(50);
    if ( iI==1 )
    {
      Distancia1 = int(0.017*tiempo);
    }
    else if ( iI== 2 )
    {
      Distancia2 = int(0.017*tiempo);
    }
    else if ( iI==3 )
    {
      Distancia3 = int(0.017*tiempo);
    }
   }

  if (Distancia1 > Distancia2 && Distancia1 > Distancia3)
  {
    if (Distancia2 > Distancia3)
    {
      DistanciaSenIzquierdo = Distancia2;
    }
    else
    {
      DistanciaSenIzquierdo = Distancia3;
    }
  }
  if (Distancia2 > Distancia1 && Distancia2 > Distancia3)
  {
    if (Distancia1 > Distancia3)
    {
      DistanciaSenIzquierdo = Distancia1;
    }
    else
    {
      DistanciaSenIzquierdo = Distancia3;
    }
  }
  if (Distancia3 > Distancia1 && Distancia3 > Distancia2)
  {
    if (Distancia2 > Distancia1)
    {
      DistanciaSenIzquierdo = Distancia2;
    }
    else 
    {
      DistanciaSenIzquierdo = Distancia1;
    }
  }
  if (Distancia1 == Distancia2)
  {
   DistanciaSenIzquierdo=Distancia1;
  }
  if (Distancia1 == Distancia3)
  {
   DistanciaSenIzquierdo=Distancia1;
  }
  if (Distancia2 == Distancia3)
  {
   DistanciaSenIzquierdo=Distancia2;
  }
    if (Distancia2 == Distancia1)
  {
   DistanciaSenIzquierdo=Distancia2;
  }
  
 return DistanciaSenIzquierdo;
}

void adelante30()
{
  int iPos = SensorFrontal();
  int iDist = iPos - 30;


  while(iPos > iDist)
  {
    avanzar();
    iPos = SensorFrontal();
  }
  detenerse();
}

void loop() {
  // put your main code here, to run repeatedly:

}
